     1  /*
     2   * サンプルドライバ
     3   *
     4   * プラットフォームドライバを登録する。
     5   *
     6   */
     7  #include <linux/module.h>
     8  #include <linux/kernel.h>
     9  #include <linux/device.h>
    10  #include <linux/siphash.h>
    11  #include <linux/io.h>
    12  #include <linux/interrupt.h>
    13  #include <linux/of.h>
    14  #include <linux/of_device.h>
    15  #include "sample.h"
    16
    17  MODULE_LICENSE("GPL");
    18  MODULE_DESCRIPTION("This is a sample driver.");
    19  MODULE_AUTHOR("Yutaka Hirata");
    20
    21  static int sa_probe(struct platform_device *pdev)
    22  {
    23      struct device *dev = &pdev->dev;
    24      struct sample_platdata *pd = dev_get_platdata(&pdev->dev);
    25      struct resource *res;
    26      int irq;
    27
    28      printk("%s\n", __func__);
    29      printk("of_node %px\n", dev->of_node);
    30
    31      res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
    32      if (res) {
    33          printk("%s: %pr\n", __func__, res);
    34      }
    35      irq = platform_get_irq(pdev, 0);
    36      printk("%s: IRQ %d\n", __func__, irq);
    37
    38      printk("%s: Platform data %x %x\n", __func__, pd->flags, pd->dummy);
    39
    40      return 0;
    41  }
    42
    43  static int sa_remove(struct platform_device *pdev)
    44  {
    45      printk("%s\n", __func__);
    46
    47      return 0;
    48  }
    49
    50  static struct platform_driver sa_drv = {
    51      .probe = sa_probe,
    52      .remove = sa_remove,
    53      .driver = {
    54          .name = MODULE_NAME,
    55          .owner = THIS_MODULE,
    56      },
    57  };
    58
    59  module_platform_driver(sa_drv);
    60
